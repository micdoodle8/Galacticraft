
def mcVersion = "1.7"
def versionMajor = 3
def versionMinor = 0
def versionRev = 12

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge' // Add forge dependency

sourceSets.main {
    java {
        srcDirs = ['src/main/java', 'dependencies/main/java']
    }
    resources {
        srcDirs = ['src/main/resources', 'dependencies/main/resources']
    }
}

def versionBuild = 0
if (System.getenv("BUILD_NUMBER") != null)
    versionBuild = System.getenv("BUILD_NUMBER")
	
version = "${mcVersion}-${versionMajor}.${versionMinor}.${versionRev}.${versionBuild}" // Set the version number
group= "micdoodle8.mods.galacticraft"
archivesBaseName = "GalacticraftCoreAll"
	
minecraft {
    version = "1.7.10-10.13.4.1448-1.7.10" // Forge version
    runDir = "eclipse/assets" // This is where forge will download Minecraft assets
}

// Keep a list of dependencies files/directories for easy jar packing
ext.dependencies = ['codechicken/**',
					'**/nei_at.cfg']
					
// Keep a list of core files/directories for easy jar packing
ext.apiFiles = ['micdoodle8/mods/galacticraft/api/**']
					
// Keep a list of core files/directories for easy jar packing
ext.coreFiles = ['micdoodle8/mods/galacticraft/api/**',
					'micdoodle8/mods/galacticraft/core/**',
					'tconstruct/**',
					'assets/minecraft/**',
					'assets/galacticraftmoon/**',
					'assets/galacticraftcore/**',
					'**/dependenciesGC.info']
					
// Keep a list of planets addon files/directories for easy jar packing
ext.planetsFiles = ['micdoodle8/mods/galacticraft/planets/**',
					'assets/galacticraftmars/**',
					'assets/galacticraftasteroids/**']
					
// Keep a list of coremod files/directories for easy jar packing
ext.micdoodleCoreFiles = ['**/micdoodlecore_at.cfg',
					'**/micdoodlecore_at.deobf',
					'micdoodle8/mods/miccore/**']

ext.coreJar = "build/libs/" + archivesBaseName + "-" + version + ".jar"

// Configure the main jar
jar
{
	// Add necessary files, remove unnecessary ones.
	includes.addAll(project.ext.coreFiles)
	includes.addAll('mcmod.info')
	includes.addAll('LICENSE.txt')
	includes.addAll('api/player/**')
	includes.addAll(project.ext.dependencies)
	includes.addAll(project.ext.planetsFiles)
	includes.addAll(project.ext.micdoodleCoreFiles)
}

task moveCoreMcmodInfo(type: Copy, dependsOn: "reobf") {
	from 'LICENSE.txt'
	from(zipTree(project.ext.coreJar))
	from 'src/main/resources/assets/galacticraftcore/mcmod.info'
	into 'temporary'
}

task movePlanetsMcmodInfo(type: Copy, dependsOn: "reobf") {
	from 'src/main/resources/assets/galacticraftmars/mcmod.info'
	into 'temporary'
}

task rePackAllJarCore(type: Jar, dependsOn: "moveCoreMcmodInfo") {
	from 'temporary'
}

task rePackAllJarPlanets(type: Jar, dependsOn: "movePlanetsMcmodInfo") {
	from 'temporary'
}

task packCoreJar(type: Jar, dependsOn: "rePackAllJarCore") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "GalacticraftCore"
	
	from(zipTree(project.ext.coreJar)) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.coreFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.dependencies)
		excludes.addAll(project.ext.micdoodleCoreFiles)
	}
}

task packPlanetsJar(type: Jar, dependsOn: "rePackAllJarPlanets") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "Galacticraft-Planets"
	
	from(zipTree(project.ext.coreJar)) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.planetsFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.dependencies)
		excludes.addAll(project.ext.micdoodleCoreFiles)
	}
}

task packMicCoreJar(type: Jar, dependsOn: "reobf") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "MicdoodleCore"
	
	from(zipTree(project.ext.coreJar)) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.micdoodleCoreFiles)
		includes.addAll('LICENSE.txt')
		include('micdoodle8/mods/galacticraft/api/entity/IEntityBreathable.class')
	}
	
	// Configure manifest attributes
	manifest
	{
		// Add required coremod manifest attributes
		attributes.put("FMLCorePlugin", "micdoodle8.mods.miccore.MicdoodlePlugin")
		attributes.put("AccessTransformer", "micdoodlecore_at.cfg")
	}
}

task packCoreJarDev(type: Jar, dependsOn: "classes") {
	from (sourceSets.main.output) {
		includes.addAll(project.ext.coreFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.dependencies)
		excludes.addAll(project.ext.micdoodleCoreFiles)
	}
	
	from (sourceSets.main.allSource) {
		includes.addAll(project.ext.coreFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.dependencies)
		excludes.addAll(project.ext.micdoodleCoreFiles)
		excludes.addAll('assets')
		into 'src'
	}
	
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "GalacticraftCore-Dev"
}

task packPlanetsJarDev(type: Jar, dependsOn: "classes") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "Galacticraft-Planets-Dev"
	
	from (sourceSets.main.output) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.planetsFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.dependencies)
		excludes.addAll(project.ext.micdoodleCoreFiles)
	}
	
	from (sourceSets.main.allSource) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.planetsFiles)
		includes.addAll('mcmod.info')
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.dependencies)
		excludes.addAll(project.ext.micdoodleCoreFiles)
		excludes.addAll('assets')
		into 'src'
	}
}

task packMicCoreJarDev(type: Jar, dependsOn: "classes") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "MicdoodleCore-Dev"
	
	from (sourceSets.main.output) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.micdoodleCoreFiles)
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.dependencies)
		excludes.addAll('**/*.info')
	}
	
	from (sourceSets.main.allSource) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.micdoodleCoreFiles)
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.coreFiles)
		excludes.addAll(project.ext.dependencies)
		excludes.addAll('**/*.info')
		excludes.addAll('assets')
		into 'src'
	}
	
	// Configure manifest attributes
	manifest
	{
		// Add required coremod manifest attributes
		attributes.put("FMLCorePlugin", "micdoodle8.mods.miccore.MicdoodlePlugin")
		attributes.put("AccessTransformer", "micdoodlecore_at.cfg")
	}
}

task packApi(type: Jar, dependsOn: "classes") {
	// Jar will always be updated
	outputs.upToDateWhen {false}
	// Set the jar's base name
	baseName = "Galacticraft-API"
	
	from (sourceSets.main.allSource) {
		// Add necessary files, remove unnecessary ones.
		includes.addAll(project.ext.apiFiles)
		includes.addAll('LICENSE.txt')
		excludes.addAll(project.ext.micdoodleCoreFiles)
		excludes.addAll(project.ext.planetsFiles)
		excludes.addAll(project.ext.dependencies)
		excludes.addAll('**/*.info')
		excludes.addAll('assets')
	}
}

task cleanOldJar(type: Delete, dependsOn: "packMicCoreJar") {
	delete 'temporary', project.ext.coreJar
}

task cleanOldJarDev(type: Delete, dependsOn: "packApi") {
	delete 'temporary', project.ext.coreJar
}
