buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

def mcVersion = "1.11.2"

def versionMajor = 4
def versionMinor = 0
def versionRev = 0

def versionBuild = System.getenv("BUILD_NUMBER") ?: 0


allprojects {
    apply plugin: 'net.minecraftforge.gradle.forge'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    minecraft {
        version = "$mcVersion-13.20.0.2259"
        runDir = "run"

        // the mappings can be changed at any time, and must be in the following format.
        // snapshot_YYYYMMDD   snapshot are built nightly.
        // stable_#            stables are built at the discretion of the MCP team.
        // Use non-default mappings at your own risk. they may not allways work.
        // simply re-run your setup task after changing the mappings to update your workspace.
        mappings = "snapshot_20161220"
        makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    }
}

def core = project('MicdoodleCore')

minecraft {
    atSource core.file('src/main/resources/micdoodlecore_at.cfg')
}

version = "${mcVersion}-${versionMajor}.${versionMinor}.${versionRev}.${versionBuild}-BETA" // Set the version number
group = "micdoodle8.mods.galacticraft"
archivesBaseName = "GalacticraftCoreAll"

dependencies {
    compile core
}

// Keep a list of core files/directories for easy jar packing
def apiFiles = ['micdoodle8/mods/galacticraft/api/**']

// Keep a list of planets addon files/directories for easy jar packing
def planetsFiles = ['micdoodle8/mods/galacticraft/planets/**',
                    'assets/galacticraftplanets/**']

// Configure the main jar
jar {
    from sourceSets.api.output
    from core.sourceSets.main.output

    manifest {
        // Add required coremod manifest attributes

        attributes FMLCorePlugin: "micdoodle8.mods.miccore.MicdoodlePlugin"
        attributes AccessTransformer: "micdoodlecore_at.cfg"
    }
}

task jarCore(type: Jar) {
    baseName 'GalacticraftCore'

    from sourceSets.main.output
    exclude planetsFiles

}

task jarPlanets(type: Jar) {
    baseName 'Galacticraft-Planets'

    from(sourceSets.main.output) {
        include planetsFiles
    }
}


task jarMicdoodleCore(type: Jar) {
    baseName = "MicdoodleCore"

    from core.sourceSets.main.output
    from(sourceSets.main.output) {
        include 'micdoodle8/mods/galacticraft/api/entity/IEntityBreathable.class'
    }
    // Configure manifest attributes
    manifest {
        // Add required coremod manifest attributes

        attributes FMLCorePlugin: "micdoodle8.mods.miccore.MicdoodlePlugin"
        attributes AccessTransformer: "micdoodlecore_at.cfg"
    }
}

task jarCoreDev(type: Jar) {

    baseName = "GalacticraftCore-Dev"

    from(sourceSets.main.output) {
        exclude planetsFiles
    }
}
task jarCoreSrc(type: Jar) {

    baseName = "GalacticraftCore-Dev"
    classifier = 'src'

    from(sourceSets.main.allSource) {
        exclude planetsFiles
    }
}

task jarPlanetsDev(type: Jar) {

    baseName = "Galacticraft-Planets-Dev"

    from(sourceSets.main.output) {
        include planetsFiles
    }
}

task jarPlanetsSrc(type: Jar) {

    baseName = "Galacticraft-Planets-Dev"
    classifier = 'src'

    from(sourceSets.main.allSource) {
        include planetsFiles
    }
}

task jarMicdoodleCoreDev(type: Jar) {
    // Set the jar's base name
    baseName = "MicdoodleCore-Dev"

    from core.sourceSets.main.output

    // Configure manifest attributes
    manifest {
        // Add required coremod manifest attributes
        attributes FMLCorePlugin: "micdoodle8.mods.miccore.MicdoodlePlugin"
        attributes AccessTransformer: "micdoodlecore_at.cfg"
    }
}
task jarMicdoodleCoreSrc(type: Jar) {
    // Set the jar's base name
    baseName = "MicdoodleCore-Dev"
    classifier = 'src'

    from core.sourceSets.main.allSource

}

task jarApi(type: Jar) {
    // Set the jar's base name
    baseName = "Galacticraft-API"

    from(sourceSets.main.output) {
        // Add necessary files, remove unnecessary ones.
        include apiFiles
    }
}

task jarApiSrc(type:Jar) {
    baseName = 'Galacticraft-API'
    classifier = 'src'

    from (sourceSets.main.allSource) {
        include apiFiles
    }
}

artifacts {
    archives jarCore, jarCoreDev, jarCoreSrc
    archives jarPlanets, jarPlanetsDev, jarPlanetsSrc
    archives jarMicdoodleCore, jarMicdoodleCoreDev, jarMicdoodleCoreDev
}

tasks.withType(Jar)*.from 'LICENSE.txt'

reobf {
    jarCore {}
    jarPlanets {}
    jarMicdoodleCore {}
}
